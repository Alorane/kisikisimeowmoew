import { Bot } from "grammy";
import type { BotContext } from "../types/bot";
import { repairsService } from "../services/repairs";
import { sendMessage } from "../utils/bot";
import {
  deviceTypesKeyboard,
  modelsKeyboard,
  issuesKeyboard,
} from "../utils/keyboards";
import { buildIssueResponse } from "../utils/responses";

interface AdminUtils {
  isAdmin: (ctx: BotContext) => boolean;
  isAdminMode: (ctx: BotContext) => boolean;
  isPrivateChat: (ctx: BotContext) => boolean;
}

export function registerActions(bot: Bot<BotContext>, adminUtils: AdminUtils) {
  const { isAdminMode, isPrivateChat } = adminUtils;

  bot.callbackQuery(/^nav:([^:]+):(\d+)$/, async (ctx) => {
    const type = ctx.match[1];
    const page = Number(ctx.match[2]);
    try {
      await ctx.editMessageText(`–í—ã–±–µ—Ä–∏ –º–æ–¥–µ–ª—å ${type}:`, {
        reply_markup: modelsKeyboard(type, page),
      });
    } catch {
      // ignore
    }
    return ctx.answerCallbackQuery();
  });

  bot.callbackQuery(/^type:(.+)$/s, async (ctx) => {
    const type = ctx.match[1];
    console.log(`üì± User selected device type: ${type}`);
    ctx.session.deviceType = type;
    try {
      console.log(`üìù Editing message for type selection: ${type}`);
      await ctx.editMessageText(`–í—ã–±–µ—Ä–∏ –º–æ–¥–µ–ª—å ${type}:`, {
        reply_markup: modelsKeyboard(type, 0),
      });
      console.log(`‚úÖ Successfully edited message for type: ${type}`);
    } catch (error) {
      console.log(
        `‚ùå Failed to edit message for type ${type}, trying reply:`,
        error,
      );
      await ctx.reply(`–í—ã–±–µ—Ä–∏ –º–æ–¥–µ–ª—å ${type}:`, {
        reply_markup: modelsKeyboard(type, 0),
      });
      console.log(`‚úÖ Successfully replied for type: ${type}`);
    }
    return ctx.answerCallbackQuery();
  });

  bot.callbackQuery(/^mdl:(.+):(.+)$/s, async (ctx) => {
    const deviceType = ctx.match[1];
    const model = ctx.match[2];
    console.log(`üì± User selected model: ${model} (type: ${deviceType})`);

    ctx.session.model = model;
    ctx.session.issues = Object.keys(repairsService.getRepairs()[model] || {});

    console.log(
      `üîß Available issues for ${model}: ${ctx.session.issues.join(", ")}`,
    );

    try {
      console.log(`üìù Editing message for model selection: ${model}`);
      await ctx.editMessageText(`üì± –ú–æ–¥–µ–ª—å: ${model}\n–í—ã–±–µ—Ä–∏ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å:`, {
        reply_markup: issuesKeyboard(model, isAdminMode(ctx)),
      });
      console.log(`‚úÖ Successfully edited message for model: ${model}`);
    } catch (error) {
      console.log(
        `‚ùå Failed to edit message for model ${model}, trying reply:`,
        error,
      );
      await ctx.reply(`üì± –ú–æ–¥–µ–ª—å: ${model}\n–í—ã–±–µ—Ä–∏ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å:`, {
        reply_markup: issuesKeyboard(model, isAdminMode(ctx)),
      });
      console.log(`‚úÖ Successfully replied for model: ${model}`);
    }
    return ctx.answerCallbackQuery();
  });

  bot.callbackQuery("back_models", async (ctx) => {
    const type = ctx.session?.deviceType;
    if (!type) {
      // fallback to device types
      try {
        await ctx.editMessageText("–í—ã–±–µ—Ä–∏ —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:", {
          reply_markup: deviceTypesKeyboard(),
        });
      } catch {
        await ctx.reply("–í—ã–±–µ—Ä–∏ —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:", {
          reply_markup: deviceTypesKeyboard(),
        });
      }
      return ctx.answerCallbackQuery();
    }
    try {
      await ctx.editMessageText(`–í—ã–±–µ—Ä–∏ –º–æ–¥–µ–ª—å ${type}:`, {
        reply_markup: modelsKeyboard(type, 0),
      });
    } catch {
      await ctx.reply(`–í—ã–±–µ—Ä–∏ –º–æ–¥–µ–ª—å ${type}:`, {
        reply_markup: modelsKeyboard(type, 0),
      });
    }
    return ctx.answerCallbackQuery();
  });

  bot.callbackQuery("back_types", async (ctx) => {
    try {
      await ctx.editMessageText("–í—ã–±–µ—Ä–∏ —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:", {
        reply_markup: deviceTypesKeyboard(),
      });
    } catch {
      await ctx.reply("–í—ã–±–µ—Ä–∏ —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:", {
        reply_markup: deviceTypesKeyboard(),
      });
    }
    return ctx.answerCallbackQuery();
  });

  bot.callbackQuery(/^iss:(\d+)$/, async (ctx) => {
    const idx = Number(ctx.match[1]);
    const { model, issues } = ctx.session;
    if (!model || !issues || !issues[idx]) {
      return ctx.answerCallbackQuery({
        text: "–°–µ—Å—Å–∏—è —Å–±—Ä–æ—à–µ–Ω–∞, –≤—ã–±–µ—Ä–∏ –º–æ–¥–µ–ª—å –∑–∞–Ω–æ–≤–æ.",
        show_alert: true,
      });
    }
    const issue = issues[idx];
    const payload = buildIssueResponse(model, issue, isAdminMode(ctx));
    if (!payload) {
      return ctx.answerCallbackQuery({
        text: "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞–±–æ—Ç—É",
        show_alert: true,
      });
    }

    ctx.session.issue = issue;
    const repairs = repairsService.getRepairs();
    ctx.session.price = repairs[model][issue].price;

    try {
      await ctx.editMessageText(payload.text, {
        reply_markup: payload.keyboard,
      });
    } catch {
      await ctx.reply(payload.text, { reply_markup: payload.keyboard });
    }
    return ctx.answerCallbackQuery();
  });

  bot.callbackQuery("back_issues", async (ctx) => {
    const model = ctx.session?.model;
    if (!model) return ctx.answerCallbackQuery();
    try {
      await ctx.editMessageText(`üì± –ú–æ–¥–µ–ª—å: ${model}\n–í—ã–±–µ—Ä–∏ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å:`, {
        reply_markup: issuesKeyboard(model, isAdminMode(ctx)),
      });
    } catch {
      await ctx.reply(`üì± –ú–æ–¥–µ–ª—å: ${model}\n–í—ã–±–µ—Ä–∏ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å:`, {
        reply_markup: issuesKeyboard(model, isAdminMode(ctx)),
      });
    }
    return ctx.answerCallbackQuery();
  });

  bot.callbackQuery("order", async (ctx) => {
    if (!isPrivateChat(ctx)) return ctx.answerCallbackQuery();
    ctx.session.step = "name";
    await ctx.answerCallbackQuery();
    await sendMessage(ctx, "–û–∫–µ–π! –í–≤–µ–¥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç:");
  });

  bot.callbackQuery("noop", (ctx) => ctx.answerCallbackQuery());

  bot.callbackQuery(/^add_issue:(.+)$/s, async (ctx) => {
    if (!isAdminMode(ctx)) {
      return ctx.answerCallbackQuery({ text: "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert: true });
    }
    const model = ctx.match[1];
    const repairs = repairsService.getRepairs();
    if (!repairs[model]) {
      return ctx.answerCallbackQuery({
        text: "–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
        show_alert: true,
      });
    }
    ctx.session.adminEdit = { mode: "add_issue", model, stage: "title" };
    ctx.session.step = undefined;
    await ctx.answerCallbackQuery();
    await sendMessage(
      ctx,
      `–î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ä–∞–±–æ—Ç—É –¥–ª—è ${model}. –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã:`,
    );
  });

  bot.callbackQuery("admin_edit_price", async (ctx) => {
    if (!isAdminMode(ctx)) {
      return ctx.answerCallbackQuery({ text: "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert: true });
    }
    const { model, issue } = ctx.session;
    if (!model || !issue) {
      return ctx.answerCallbackQuery({
        text: "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Ä–∞–±–æ—Ç—É",
        show_alert: true,
      });
    }
    ctx.session.adminEdit = { mode: "price", model, issue };
    ctx.session.step = undefined;
    await ctx.answerCallbackQuery();
    await sendMessage(ctx, `–í–≤–µ–¥–∏ –Ω–æ–≤—É—é —Ü–µ–Ω—É –¥–ª—è ¬´${issue}¬ª –≤ ‚ÇΩ (—á–∏—Å–ª–æ).`);
  });

  bot.callbackQuery("admin_edit_desc", async (ctx) => {
    if (!isAdminMode(ctx)) {
      return ctx.answerCallbackQuery({ text: "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert: true });
    }
    const { model, issue } = ctx.session;
    if (!model || !issue) {
      return ctx.answerCallbackQuery({
        text: "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Ä–∞–±–æ—Ç—É",
        show_alert: true,
      });
    }
    ctx.session.adminEdit = { mode: "desc", model, issue };
    ctx.session.step = undefined;
    await ctx.answerCallbackQuery();
    await sendMessage(ctx, `–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è ¬´${issue}¬ª.`);
  });

  bot.callbackQuery("admin_edit_waranty", async (ctx) => {
    if (!isAdminMode(ctx)) {
      return ctx.answerCallbackQuery({ text: "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert: true });
    }
    const { model, issue } = ctx.session;
    if (!model || !issue) {
      return ctx.answerCallbackQuery({
        text: "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Ä–∞–±–æ—Ç—É",
        show_alert: true,
      });
    }
    ctx.session.adminEdit = { mode: "waranty", model, issue };
    ctx.session.step = undefined;
    await ctx.answerCallbackQuery();
    await sendMessage(
      ctx,
      `–í–≤–µ–¥–∏ –Ω–æ–≤—É—é –≥–∞—Ä–∞–Ω—Ç–∏—é –¥–ª—è ¬´${issue}¬ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: '30 –¥–Ω–µ–π', '6 –º–µ—Å—è—Ü–µ–≤').`,
    );
  });

  bot.callbackQuery("admin_edit_work_time", async (ctx) => {
    if (!isAdminMode(ctx)) {
      return ctx.answerCallbackQuery({ text: "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert: true });
    }
    const { model, issue } = ctx.session;
    if (!model || !issue) {
      return ctx.answerCallbackQuery({
        text: "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Ä–∞–±–æ—Ç—É",
        show_alert: true,
      });
    }
    ctx.session.adminEdit = { mode: "work_time", model, issue };
    ctx.session.step = undefined;
    await ctx.answerCallbackQuery();
    await sendMessage(
      ctx,
      `–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è ¬´${issue}¬ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: '2 —á–∞—Å–∞', '1-2 –¥–Ω—è').`,
    );
  });

  bot.callbackQuery("admin_delete_issue", async (ctx) => {
    if (!isAdminMode(ctx)) {
      return ctx.answerCallbackQuery({ text: "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert: true });
    }
    const { model, issue } = ctx.session;
    if (!model || !issue) {
      return ctx.answerCallbackQuery({
        text: "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Ä–∞–±–æ—Ç—É",
        show_alert: true,
      });
    }
    ctx.session.adminEdit = { mode: "delete_issue", model, issue };
    ctx.session.step = undefined;
    await ctx.answerCallbackQuery();
    await sendMessage(
      ctx,
      `–¢–æ—á–Ω–æ —É–¥–∞–ª–∏—Ç—å ¬´${issue}¬ª –¥–ª—è ${model}? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å. –ù–∞–ø–∏—à–∏ ¬´–¥–∞¬ª –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.`,
    );
  });
}
