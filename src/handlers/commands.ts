import { Bot } from "grammy";
import type { BotContext } from "../types/bot";
import { repairsService } from "../services/repairs";
import { settingsService } from "../services/settings";
import { sendMessage, sendRepairMessage } from "../utils/bot";
import { deviceTypesKeyboard, issuesKeyboard } from "../utils/keyboards";
import { buildIssueResponse } from "../utils/responses";

interface AdminUtils {
  isAdmin: (ctx: BotContext) => boolean;
  isPrivateChat: (ctx: BotContext) => boolean;
  isAdminMode: (ctx: BotContext) => boolean;
  setAdminMode: (ctx: BotContext, enabled: boolean) => void;
}

export function registerCommands(
  bot: Bot<BotContext>,
  ADMIN_IDS: string[],
  adminUtils: AdminUtils,
  setCommandsForChat?: (chatId: number, isAdmin: boolean) => Promise<void>,
) {
  const { isAdmin, isPrivateChat, isAdminMode, setAdminMode } = adminUtils;

  bot.command("start", async (ctx) => {
    if (!isPrivateChat(ctx)) return;
    ctx.session = {};

    // Set appropriate commands for this chat
    if (setCommandsForChat && ctx.chat?.id) {
      const isUserAdmin = isAdmin(ctx);
      await setCommandsForChat(ctx.chat.id, isUserAdmin && isAdminMode(ctx));
    }

    await sendMessage(
      ctx,
      "–ü—Ä–∏–≤–µ—Ç! üëã –Ø –ø–æ–º–æ–≥—É —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–µ–º–æ–Ω—Ç. –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:",
      { reply_markup: deviceTypesKeyboard() },
    );
  });

  bot.command("admin", async (ctx) => {
    if (!isAdmin(ctx)) {
      return ctx.reply("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.");
    }
    if (!isPrivateChat(ctx)) {
      return ctx.reply("–ê–¥–º–∏–Ω–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º.");
    }
    const message = ctx.message;
    if (!message || !("text" in message)) return;
    const [, ...rest] = (message.text || "").trim().split(/\s+/);
    const arg = rest.join(" ").toLowerCase();
    ctx.session = ctx.session || {};
    if (arg === "off" || arg === "exit" || arg === "stop") {
      setAdminMode(ctx, false);
      ctx.session.adminEdit = undefined;

      // Reset to basic commands for this chat
      if (setCommandsForChat && ctx.chat?.id) {
        await setCommandsForChat(ctx.chat.id, false);
      }

      return ctx.reply("–ê–¥–º–∏–Ω-—Ä–µ–∂–∏–º –≤—ã–∫–ª—é—á–µ–Ω. –ö–Ω–æ–ø–∫–∏ –∏ –∫–æ–º–∞–Ω–¥—ã —Å–∫—Ä—ã—Ç—ã.");
    }

    const alreadyEnabled = isAdminMode(ctx);
    setAdminMode(ctx, true);

    if (alreadyEnabled) {
      return ctx.reply("–ê–¥–º–∏–Ω-—Ä–µ–∂–∏–º —É–∂–µ –≤–∫–ª—é—á—ë–Ω.");
    }

    // Set admin commands for this chat
    if (setCommandsForChat && ctx.chat?.id) {
      await setCommandsForChat(ctx.chat.id, true);
    }

    await sendMessage(
      ctx,
      `–ê–¥–º–∏–Ω-—Ä–µ–∂–∏–º –≤–∫–ª—é—á—ë–Ω (ID: ${ctx.from?.id || "unknown"}). –ü–æ–≤—Ç–æ—Ä–∏ –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –∏ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–∏, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.`,
    );

    const { model, issue } = ctx.session;
    const repairs = repairsService.getRepairs();
    if (model && issue) {
      const payload = buildIssueResponse(model, issue, true);
      if (payload) {
        await sendRepairMessage(ctx, payload.text, {
          reply_markup: payload.keyboard,
        });
        return;
      }
    }
    if (model && repairs[model]) {
      await sendMessage(ctx, `üì± –ú–æ–¥–µ–ª—å: ${model}\n–í—ã–±–µ—Ä–∏ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å:`, {
        reply_markup: issuesKeyboard(model, true),
      });
      return;
    }
    await sendMessage(ctx, "–í—ã–±–µ—Ä–∏ —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:", {
      reply_markup: deviceTypesKeyboard(),
    });
  });

  bot.command("models", async (ctx) => {
    if (!isPrivateChat(ctx)) return;
    await sendMessage(ctx, "–í—ã–±–µ—Ä–∏ —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:", {
      reply_markup: deviceTypesKeyboard(),
    });
  });

  bot.command("reload", async (ctx) => {
    if (!isAdmin(ctx)) {
      if (isPrivateChat(ctx))
        await ctx.reply("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.");
      return;
    }
    if (!isPrivateChat(ctx)) {
      return ctx.reply("–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ.");
    }
    await repairsService.loadRepairs();
    await ctx.reply("üîÑ –ü—Ä–∞–π—Å –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.");
  });

  bot.command("notify_here", async (ctx) => {
    if (!isAdmin(ctx)) {
      return ctx.reply("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.");
    }
    const chatId = String(ctx.chat?.id || "");
    if (!chatId) {
      return ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Ç.");
    }
    const ok = await settingsService.addNotifyChat(chatId);
    if (ok) {
      await ctx.reply(
        "‚úÖ –≠—Ç–æ—Ç —á–∞—Ç —Ç–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–∫–∞—Ö.",
      );
    } else {
      await ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏. –ü—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏.");
    }
  });

  bot.command("stop_notify", async (ctx) => {
    if (!isAdmin(ctx)) {
      return ctx.reply("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.");
    }
    const chatId = String(ctx.chat?.id || "");
    if (!chatId) {
      return ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Ç.");
    }
    const ok = await settingsService.removeNotifyChat(chatId);
    if (ok) {
      await ctx.reply(
        "üîï –≠—Ç–æ—Ç —á–∞—Ç –±–æ–ª—å—à–µ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —Å–Ω–æ–≤–∞ ‚Äî /notify_here.",
      );
    } else {
      await ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏. –ü—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏.");
    }
  });

  bot.command("notify_list", async (ctx) => {
    if (!isAdmin(ctx)) {
      return ctx.reply("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.");
    }
    const chats = settingsService.getNotifyChatIds();
    if (!chats.length) {
      return ctx.reply(
        "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∏–∫—É–¥–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è. –ò—Å–ø–æ–ª—å–∑—É–π /notify_here –≤ –Ω—É–∂–Ω–æ–º —á–∞—Ç–µ.",
      );
    }
    const lines = chats.map((id) => `‚Ä¢ ${id}`).join("\n");
    return ctx.reply(`–°–µ–π—á–∞—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–¥—É—Ç –≤:\n${lines}`);
  });
}
