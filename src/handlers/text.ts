import { Bot } from "grammy";
import type { BotContext } from "../types/bot";
import { repairsService } from "../services/repairs";
import { ordersService } from "../services/orders";
import { settingsService } from "../services/settings";
import {
  sendMessage,
  replaceRepairMessage,
  sendKeyboardMessage,
  fmtPrice,
  normalizePhoneInput,
} from "../utils/bot";
import {
  deviceTypesKeyboard,
  modelsKeyboard,
  issuesKeyboard,
} from "../utils/keyboards";
import { buildIssueResponse } from "../utils/responses";

interface AdminUtils {
  isAdminMode: (ctx: BotContext) => boolean;
  isPrivateChat: (ctx: BotContext) => boolean;
}

export function registerTextHandler(
  bot: Bot<BotContext>,
  adminUtils: AdminUtils,
) {
  const { isAdminMode, isPrivateChat } = adminUtils;

  bot.on("message:text", async (ctx, next) => {
    const text = ctx.message.text.trim();

    if (!isPrivateChat(ctx)) return;

    if (isAdminMode(ctx) && ctx.session.adminEdit) {
      const editor = ctx.session.adminEdit;
      const { mode, deviceId, issue, stage } = editor;

      if (mode === "price" && deviceId && issue) {
        const num = Number(String(text).replace(/[^\d.]/g, ""));
        if (!Number.isFinite(num) || num <= 0) {
          return ctx.reply(
            "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —á–∏—Å–ª–æ. –í–≤–µ–¥–∏ —Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä 12500.",
          );
        }
        const price = Math.round(num);
        const saved = await repairsService.updatePrice(deviceId, issue, price);
        if (saved) {
          await ctx.reply("–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.");
          const payload = buildIssueResponse(deviceId, issue, isAdminMode(ctx));
          if (payload) {
            await replaceRepairMessage(ctx, payload.text, {
              reply_markup: payload.keyboard,
            });
          }
        } else {
          ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏.");
        }
        ctx.session.adminEdit = undefined;
        return;
      }

      if (mode === "desc" && deviceId && issue) {
        const saved = await repairsService.updateDescription(
          deviceId,
          issue,
          text,
        );
        if (saved) {
          await ctx.reply("–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.");
          const payload = buildIssueResponse(deviceId, issue, isAdminMode(ctx));
          if (payload) {
            await replaceRepairMessage(ctx, payload.text, {
              reply_markup: payload.keyboard,
            });
          }
        } else {
          ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏.");
        }
        ctx.session.adminEdit = undefined;
        return;
      }

      if (mode === "warranty" && deviceId && issue) {
        const warranty = text.trim() || null;
        const saved = await repairsService.updateWarranty(
          deviceId,
          issue,
          warranty,
        );
        if (saved) {
          await ctx.reply("–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.");
          const payload = buildIssueResponse(deviceId, issue, isAdminMode(ctx));
          if (payload) {
            await replaceRepairMessage(ctx, payload.text, {
              reply_markup: payload.keyboard,
            });
          }
        } else {
          ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏.");
        }
        ctx.session.adminEdit = undefined;
        return;
      }

      if (mode === "work_time" && deviceId && issue) {
        const workTime = text.trim() || null;
        const saved = await repairsService.updateWorkTime(
          deviceId,
          issue,
          workTime,
        );
        if (saved) {
          await ctx.reply("–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.");
          const payload = buildIssueResponse(deviceId, issue, isAdminMode(ctx));
          if (payload) {
            await replaceRepairMessage(ctx, payload.text, {
              reply_markup: payload.keyboard,
            });
          }
        } else {
          ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏.");
        }
        ctx.session.adminEdit = undefined;
        return;
      }

      if (mode === "delete_issue" && deviceId && issue) {
        if (text.toLowerCase() === "–¥–∞") {
          const saved = await repairsService.deleteRepair(deviceId, issue);
          if (saved) {
            ctx.reply(`–†–∞–±–æ—Ç–∞ ¬´${issue}¬ª –¥–ª—è ${ctx.session.model} —É–¥–∞–ª–µ–Ω–∞.`);
            // go to issues list
            ctx.session.issues = Object.keys(
              repairsService.getRepairsForDevice(deviceId) || {},
            );
            await sendKeyboardMessage(
              ctx,
              `üì± –ú–æ–¥–µ–ª—å: ${ctx.session.model}\n–í—ã–±–µ—Ä–∏ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å:`,
              {
                reply_markup: issuesKeyboard(
                  ctx.session.model || "",
                  isAdminMode(ctx),
                ),
              },
            );
          } else {
            ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å. –ü—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏.");
          }
        } else {
          ctx.reply("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.");
        }
        ctx.session.adminEdit = undefined;
        return;
      }

      if (mode === "add_device_type") {
        if (stage === "name") {
          if (!text.trim()) {
            return ctx.reply(
              "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.",
            );
          }
          editor.deviceTypeName = text;
          editor.stage = "sort_order";
          ctx.session.adminEdit = editor;
          return ctx.reply(
            `–ù–∞–∑–≤–∞–Ω–∏–µ: "${text}". –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –ø–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ (—á–∏—Å–ª–æ, —á–µ–º –º–µ–Ω—å—à–µ - —Ç–µ–º –≤—ã—à–µ –≤ —Å–ø–∏—Å–∫–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 1, 2, 3...).`,
          );
        }

        if (stage === "sort_order") {
          const sortOrder = Number(text.trim());
          if (!Number.isInteger(sortOrder) || sortOrder < 0) {
            return ctx.reply(
              "–ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.",
            );
          }

          const deviceTypeName = editor.deviceTypeName;

          if (!deviceTypeName) {
            ctx.session.adminEdit = undefined;
            return ctx.reply("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–æ—Ç–µ—Ä—è–ª–∏—Å—å. –ü–æ–ø—Ä–æ–±—É–π –∑–∞–Ω–æ–≤–æ.");
          }

          const saved = await repairsService.addDeviceType({
            name: deviceTypeName,
            sort_order: sortOrder,
          });

          if (saved) {
            await ctx.reply(`–¢–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ "${deviceTypeName}" –¥–æ–±–∞–≤–ª–µ–Ω!`);
            // Show updated device types list
            await sendKeyboardMessage(ctx, "–í—ã–±–µ—Ä–∏ —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:", {
              reply_markup: deviceTypesKeyboard(isAdminMode(ctx)),
            });
          } else {
            ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞. –ü—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏.");
          }
          ctx.session.adminEdit = undefined;
          return;
        }
      }

      if (mode === "add_model" && stage === "name") {
        if (!text.trim()) {
          return ctx.reply(
            "–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.",
          );
        }
        const deviceType = editor.deviceType;
        if (!deviceType) {
          ctx.session.adminEdit = undefined;
          return ctx.reply(
            "–û—à–∏–±–∫–∞: —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π –∑–∞–Ω–æ–≤–æ.",
          );
        }

        // Find device type id
        const deviceTypeRecord = repairsService
          .getDeviceTypeRecords()
          .find((dt) => dt.name === deviceType);
        if (!deviceTypeRecord) {
          ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞. –ü—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏.");
          ctx.session.adminEdit = undefined;
          return;
        }

        // Add device to devices table
        const deviceAdded = await repairsService.addDevice(
          text,
          deviceTypeRecord.id,
        );
        if (deviceAdded) {
          await ctx.reply(`–ú–æ–¥–µ–ª—å "${text}" –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫ —Ç–∏–ø—É "${deviceType}".`);
          // Show updated models list
          await sendKeyboardMessage(ctx, `–í—ã–±–µ—Ä–∏ –º–æ–¥–µ–ª—å ${deviceType}:`, {
            reply_markup: modelsKeyboard(deviceType, 0, isAdminMode(ctx)),
          });
        } else {
          ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –º–æ–¥–µ–ª—å. –ü—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏.");
        }
        ctx.session.adminEdit = undefined;
        return;
      }

      if (mode === "add_issue" && deviceId) {
        if (stage === "title") {
          if (!text)
            return ctx.reply(
              "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.",
            );
          const deviceRepairs =
            repairsService.getRepairsForDevice(deviceId) || {};
          if (deviceRepairs[text]) {
            return ctx.reply("–¢–∞–∫–∞—è —Ä–∞–±–æ—Ç–∞ —É–∂–µ –µ—Å—Ç—å. –í–≤–µ–¥–∏ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.");
          }
          editor.title = text;
          editor.stage = "price";
          ctx.session.adminEdit = editor;
          return ctx.reply("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Ü–µ–Ω—É –≤ ‚ÇΩ (—á–∏—Å–ª–æ).");
        }
        if (stage === "price") {
          const num = Number(String(text).replace(/[^\d.]/g, ""));
          if (!Number.isFinite(num) || num <= 0) {
            return ctx.reply(
              "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —á–∏—Å–ª–æ. –í–≤–µ–¥–∏ —Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä 12500.",
            );
          }
          editor.price = Math.round(num);
          editor.stage = "desc";
          ctx.session.adminEdit = editor;
          return ctx.reply("–û–ø–∏—à–∏ —Ä–∞–±–æ—Ç—É. –ú–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.");
        }
        if (stage === "desc") {
          editor.description = text;
          editor.stage = "warranty";
          ctx.session.adminEdit = editor;
          return ctx.reply(
            "–£–∫–∞–∂–∏ –≥–∞—Ä–∞–Ω—Ç–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: '30 –¥–Ω–µ–π', '6 –º–µ—Å—è—Ü–µ–≤' –∏–ª–∏ –æ—Å—Ç–∞–≤—å –ø—É—Å—Ç—ã–º).",
          );
        }
        if (stage === "warranty") {
          editor.warranty = text.trim() || undefined;
          editor.stage = "work_time";
          ctx.session.adminEdit = editor;
          return ctx.reply(
            "–£–∫–∞–∂–∏ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: '2 —á–∞—Å–∞', '1-2 –¥–Ω—è' –∏–ª–∏ –æ—Å—Ç–∞–≤—å –ø—É—Å—Ç—ã–º).",
          );
        }
        if (stage === "work_time") {
          const title = editor.title || "–ù–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞";
          const price = editor.price ?? 0;
          const saved = await repairsService.addRepair(
            deviceId,
            title,
            price,
            editor.description || "",
            editor.warranty,
            text.trim() || undefined,
          );
          if (saved) {
            await ctx.reply(
              `–†–∞–±–æ—Ç–∞ ¬´${title}¬ª –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫ ${ctx.session.model}.`,
            );
            // Show updated issues list
            ctx.session.issues = Object.keys(
              repairsService.getRepairsForDevice(deviceId) || {},
            );
            await sendKeyboardMessage(
              ctx,
              `üì± –ú–æ–¥–µ–ª—å: ${ctx.session.model}\n–í—ã–±–µ—Ä–∏ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å:`,
              {
                reply_markup: issuesKeyboard(
                  ctx.session.model || "",
                  isAdminMode(ctx),
                ),
              },
            );
          } else {
            ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏.");
          }
          ctx.session.adminEdit = undefined;
          return;
        }
      }
    }

    // Try to find device by name
    const device = repairsService.getDevices().find((d) => d.name === text);
    if (device) {
      ctx.session.deviceType = device.device_types?.name || "–î—Ä—É–≥–æ–µ";
      ctx.session.deviceId = device.id;
      ctx.session.model = text; // keep for backward compatibility
      ctx.session.issues = Object.keys(
        repairsService.getRepairsForDevice(device.id) || {},
      );
      return sendKeyboardMessage(
        ctx,
        `üì± –ú–æ–¥–µ–ª—å: ${text}\n–í—ã–±–µ—Ä–∏ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å:`,
        {
          reply_markup: issuesKeyboard(text, isAdminMode(ctx)),
        },
      );
    }

    const step = ctx.session?.step;

    if (step === "name") {
      ctx.session.name = text;
      ctx.session.step = "phone";
      return sendMessage(
        ctx,
        "–£–∫–∞–∂–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: +7 (918) 123-45-67, 89181234567, +79181234567 –∏ —Ç.–¥.",
      );
    }

    if (step === "phone") {
      const normalized = normalizePhoneInput(text);
      if (!normalized.ok) {
        return ctx.reply(
          "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤–≤–µ–¥—ë–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –£–∫–∞–∂–∏ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ: +7 (918) 123-45-67, 89181234567 –∏–ª–∏ +79181234567.",
        );
      }

      ctx.session.phone = normalized.value;

      const { deviceId, model, issue, price, name, phone } = ctx.session;
      if (!deviceId || !issue || !price || !name || !phone) {
        ctx.session.step = undefined;
        return ctx.reply("–°–µ—Å—Å–∏—è –ø–æ—Ç–µ—Ä—è–ª–∞—Å—å. –î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º —Å–Ω–∞—á–∞–ª–∞: /start");
      }

      const order = await ordersService.createOrder({
        name,
        phone,
        device_id: deviceId,
        issue,
        price,
        status: "pending",
      });

      if (!order) {
        return ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.");
      }

      const priceFmt = fmtPrice(price);
      await sendMessage(
        ctx,
        `‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!\n\n` +
          `üìÑ ID: ${order.id}\n` +
          `üë§ ${name}\n` +
          `üìû ${phone}\n` +
          `üì± ${model}\n` +
          `‚öôÔ∏è ${issue}\n` +
          `üí∞ ${priceFmt}\n\n` +
          `–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å —Ç–æ–±–æ–π –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.`,
      );

      const notifyTargets = settingsService.getNotifyChatIds();
      for (const chatId of notifyTargets) {
        try {
          await bot.api.sendMessage(
            chatId,
            `üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞\n\n` +
              `üìÑ ID: ${order.id}\n` +
              `üë§ ${name}\n` +
              `üìû ${phone}\n` +
              `üì± ${model}\n` +
              `‚öôÔ∏è ${issue}\n` +
              `üí∞ ${priceFmt}`,
          );
        } catch (error: unknown) {
          const message =
            error instanceof Error
              ? error.message
              : typeof error === "string"
                ? error
                : JSON.stringify(error);
          console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å —á–∞—Ç ${chatId}:`, message);
        }
      }

      ctx.session.step = undefined;
      return;
    }

    if (!step) {
      return sendKeyboardMessage(ctx, "–í—ã–±–µ—Ä–∏ —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:", {
        reply_markup: deviceTypesKeyboard(adminUtils.isAdminMode(ctx)),
      });
    }

    return next();
  });
}
